import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { Button, Card, CardContent, CardHeader, CardTitle } from '../ui'
import { cn } from '../shared/utils'

interface GameModeSelectorProps {
  gameId: string
  onModeSelect?: (mode: GameMode) => void
}

export type GameMode = 'jeopardy' | 'buzzer'

const GAME_MODES = [
  {
    id: 'jeopardy' as GameMode,
    title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Jeopardy',
    description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–≥—Ä—ã. –í–µ–¥—É—â–∏–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–≤–µ—á–∞—é—Ç —É—Å—Ç–Ω–æ.',
    features: [
      '–í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã',
      '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–≤–µ—á–∞—é—Ç —É—Å—Ç–Ω–æ',
      '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π',
      '–ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
    ],
    icon: 'üéØ',
    color: 'bg-blue-600 hover:bg-blue-700',
    textColor: 'text-blue-100'
  },
  {
    id: 'buzzer' as GameMode,
    title: 'Buzzer Mode',
    description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –ø–æ PIN –∏ —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è, –∫—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É.',
    features: [
      '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –ø–æ PIN',
      '–ì–æ–Ω–∫–∞ "–∫—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–∞–∂–∞–ª"',
      '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ',
      '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
    ],
    icon: '‚ö°',
    color: 'bg-green-600 hover:bg-green-700',
    textColor: 'text-green-100'
  }
]

export default function GameModeSelector({ gameId, onModeSelect }: GameModeSelectorProps) {
  const [selectedMode, setSelectedMode] = useState<GameMode | null>(null)
  const navigate = useNavigate()

  const handleModeSelect = (mode: GameMode) => {
    setSelectedMode(mode)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
    localStorage.setItem(`jeopardy-game-mode-${gameId}`, mode)
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
    onModeSelect?.(mode)
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    navigate(`/host/${gameId}/${mode}`)
  }

  return (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4">
      <div className="max-w-4xl w-full">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">
            –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã
          </h1>
          <p className="text-xl text-gray-300">
            –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–≥—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏?
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {GAME_MODES.map((mode) => (
            <Card
              key={mode.id}
              className={cn(
                'cursor-pointer transition-all duration-300 transform hover:scale-105',
                'border-2 hover:border-yellow-400',
                selectedMode === mode.id && 'border-yellow-400 scale-105'
              )}
              onClick={() => handleModeSelect(mode.id)}
            >
              <CardHeader className="text-center">
                <div className="text-6xl mb-4">{mode.icon}</div>
                <CardTitle className="text-2xl text-white">
                  {mode.title}
                </CardTitle>
              </CardHeader>
              
              <CardContent className="space-y-4">
                <p className="text-gray-300 text-center">
                  {mode.description}
                </p>
                
                <div className="space-y-2">
                  <h4 className="font-semibold text-white">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</h4>
                  <ul className="space-y-1">
                    {mode.features.map((feature, index) => (
                      <li key={index} className="text-sm text-gray-400 flex items-center">
                        <span className="w-2 h-2 bg-yellow-400 rounded-full mr-2"></span>
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>
                
                <Button
                  className={cn(
                    'w-full mt-6 transition-all duration-300',
                    mode.color,
                    mode.textColor,
                    'hover:shadow-lg hover:shadow-yellow-400/25'
                  )}
                  onClick={(e) => {
                    e.stopPropagation()
                    handleModeSelect(mode.id)
                  }}
                >
                  –í—ã–±—Ä–∞—Ç—å {mode.title}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="text-center mt-8">
          <p className="text-sm text-gray-500">
            –í—ã–±–æ—Ä –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–≥—Ä—ã
          </p>
        </div>
      </div>
    </div>
  )
}
