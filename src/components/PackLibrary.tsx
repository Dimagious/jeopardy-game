import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card'
import Button from '../ui/Button'
import { 
  getAllPacksFromLibrary, 
  removePackFromLibrary, 
  downloadPackAsJSON, 
  downloadPackAsCSV,
  getLibraryStats,
  clearPackLibrary
} from '../shared/packLibrary'
import { QuestionPack, PackPreview } from '../shared/types/packTypes'

interface PackLibraryProps {
  onPackSelected?: (pack: QuestionPack) => void
  className?: string
}

export default function PackLibrary({ onPackSelected, className }: PackLibraryProps) {
  const [packs, setPacks] = useState<QuestionPack[]>([])
  const [selectedPack, setSelectedPack] = useState<QuestionPack | null>(null)
  const [showConfirmDelete, setShowConfirmDelete] = useState<string | null>(null)
  const [stats, setStats] = useState({
    totalPacks: 0,
    totalQuestions: 0,
    totalCategories: 0,
    lastUpdated: '',
  })

  const loadPacks = () => {
    const allPacks = getAllPacksFromLibrary()
    setPacks(allPacks)
    setStats(getLibraryStats())
  }

  useEffect(() => {
    loadPacks()
  }, [])

  const handlePackSelect = (pack: QuestionPack) => {
    setSelectedPack(pack)
    onPackSelected?.(pack)
  }

  const handleDeletePack = (packTitle: string) => {
    removePackFromLibrary(packTitle)
    loadPacks()
    if (selectedPack?.title === packTitle) {
      setSelectedPack(null)
    }
    setShowConfirmDelete(null)
  }

  const handleClearLibrary = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      clearPackLibrary()
      loadPacks()
      setSelectedPack(null)
    }
  }

  const createPreview = (pack: QuestionPack): PackPreview => {
    const totalValue = pack.categories.reduce((sum, category) => {
      return sum + category.questions.reduce((catSum, question) => catSum + question.value, 0)
    }, 0)
    
    const questionCount = pack.categories.reduce((sum, category) => sum + category.questions.length, 0)
    
    const categories = pack.categories.map(category => ({
      name: category.name,
      questionCount: category.questions.length,
      values: category.questions.map(q => q.value).sort((a, b) => a - b),
    }))
    
    return {
      title: pack.title,
      categoryCount: pack.categories.length,
      questionCount,
      totalValue,
      categories,
    }
  }

  return (
    <div className={className}>
      <Card>
        <CardHeader>
          <CardTitle>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–∞–∫–µ—Ç–æ–≤</CardTitle>
        </CardHeader>
        <CardContent>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{stats.totalPacks}</div>
              <div className="text-sm text-gray-600">–ü–∞–∫–µ—Ç–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{stats.totalQuestions}</div>
              <div className="text-sm text-gray-600">–í–æ–ø—Ä–æ—Å–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">{stats.totalCategories}</div>
              <div className="text-sm text-gray-600">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
            </div>
            <div className="text-center">
              <div className="text-xs text-gray-500">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ:<br />
                {new Date(stats.lastUpdated).toLocaleDateString()}
              </div>
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex space-x-2 mb-4">
            <Button
              variant="secondary"
              onClick={loadPacks}
              className="flex-1"
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
            {packs.length > 0 && (
              <Button
                variant="danger"
                onClick={handleClearLibrary}
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            )}
          </div>

          {/* –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ */}
          {packs.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <p>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞</p>
              <p className="text-sm">–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–∞–∫–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</p>
            </div>
          ) : (
            <div className="space-y-3">
              {packs.map((pack) => {
                const preview = createPreview(pack)
                const isSelected = selectedPack?.title === pack.title
                
                return (
                  <div
                    key={pack.title}
                    className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                      isSelected 
                        ? 'border-blue-500 bg-blue-50' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handlePackSelect(pack)}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <h3 className="font-medium text-lg">{pack.title}</h3>
                        {pack.description && (
                          <p className="text-sm text-gray-600 mt-1">{pack.description}</p>
                        )}
                        <div className="flex space-x-4 mt-2 text-sm text-gray-500">
                          <span>{preview.categoryCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π</span>
                          <span>{preview.questionCount} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                          <span>${preview.totalValue} –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</span>
                        </div>
                        {pack.author && (
                          <p className="text-xs text-gray-400 mt-1">–ê–≤—Ç–æ—Ä: {pack.author}</p>
                        )}
                      </div>
                      
                      <div className="flex space-x-1 ml-4">
                        <Button
                          size="sm"
                          variant="secondary"
                          onClick={(e) => {
                            e.stopPropagation()
                            downloadPackAsJSON(pack)
                          }}
                          title="–°–∫–∞—á–∞—Ç—å –∫–∞–∫ JSON"
                        >
                          üìÑ
                        </Button>
                        <Button
                          size="sm"
                          variant="secondary"
                          onClick={(e) => {
                            e.stopPropagation()
                            downloadPackAsCSV(pack)
                          }}
                          title="–°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV"
                        >
                          üìä
                        </Button>
                        <Button
                          size="sm"
                          variant="danger"
                          onClick={(e) => {
                            e.stopPropagation()
                            setShowConfirmDelete(pack.title)
                          }}
                          title="–£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç"
                        >
                          üóëÔ∏è
                        </Button>
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          )}

          {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è */}
          {showConfirmDelete && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                <h3 className="text-lg font-medium mb-4">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
                <p className="text-gray-600 mb-6">
                  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç "{showConfirmDelete}"? 
                  –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
                </p>
                <div className="flex space-x-3">
                  <Button
                    variant="danger"
                    onClick={() => handleDeletePack(showConfirmDelete)}
                    className="flex-1"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
                  <Button
                    variant="secondary"
                    onClick={() => setShowConfirmDelete(null)}
                    className="flex-1"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
