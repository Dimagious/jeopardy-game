import { supabase } from './supabaseClient'
import { 
  Question, 
  CreateQuestionRequest, 
  UpdateQuestionRequest, 
  MoveQuestionRequest 
} from './types'

export class QuestionsApi {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getQuestions(categoryId: string): Promise<Question[]> {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('category_id', categoryId)
      .order('order_index', { ascending: true })

    if (error) throw error
    return data as Question[]
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–≥—Ä—ã
   */
  async getQuestionsByGame(gameId: string): Promise<Question[]> {
    const { data, error } = await supabase
      .from('questions')
      .select(`
        *,
        categories!inner(game_id)
      `)
      .eq('categories.game_id', gameId)
      .order('order_index', { ascending: true })

    console.log('üîç questionsApi.getQuestionsByGame - raw data:', data)
    if (data && data.length > 0) {
      console.log('üîç questionsApi.getQuestionsByGame - first item keys:', Object.keys(data[0]))
    }

    if (error) throw error
    return data as Question[]
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ID
   */
  async getQuestion(questionId: string): Promise<Question> {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('id', questionId)
      .single()

    if (error) throw error
    return data as Question
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
   */
  async createQuestion(categoryId: string, questionData: CreateQuestionRequest): Promise<Question> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: existingQuestion } = await supabase
      .from('questions')
      .select('id')
      .eq('category_id', categoryId)
      .eq('value', questionData.value)
      .single()

    if (existingQuestion) {
      throw new Error(`Question with value ${questionData.value} already exists in this category`)
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const { data: maxOrderData } = await supabase
      .from('questions')
      .select('order_index')
      .eq('category_id', categoryId)
      .order('order_index', { ascending: false })
      .limit(1)

    const maxOrder = maxOrderData?.[0]?.order_index || 0
    const order = questionData.order ?? (maxOrder + 1)

    const { data, error } = await supabase
      .from('questions')
      .insert({
        category_id: categoryId,
        value: questionData.value,
        text: questionData.text,
        answer: questionData.answer,
        order,
        is_locked: false,
        is_done: false,
      })
      .select()
      .single()

    if (error) throw error
    return data as Question
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
   */
  async updateQuestion(questionId: string, questionData: UpdateQuestionRequest): Promise<Question> {
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (questionData.value !== undefined) {
      const { data: currentQuestion } = await supabase
        .from('questions')
        .select('category_id')
        .eq('id', questionId)
        .single()

      if (currentQuestion) {
        const { data: existingQuestion } = await supabase
          .from('questions')
          .select('id')
          .eq('category_id', currentQuestion.category_id)
          .eq('value', questionData.value)
          .neq('id', questionId)
          .single()

        if (existingQuestion) {
          throw new Error(`Question with value ${questionData.value} already exists in this category`)
        }
      }
    }

    const { data, error } = await supabase
      .from('questions')
      .update({
        ...questionData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', questionId)
      .select()
      .single()

    if (error) throw error
    return data as Question
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å
   */
  async deleteQuestion(questionId: string): Promise<void> {
    const { error } = await supabase
      .from('questions')
      .delete()
      .eq('id', questionId)

    if (error) throw error
  }

  /**
   * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   */
  async moveQuestion(questionId: string, moveData: MoveQuestionRequest): Promise<Question> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: currentQuestion } = await supabase
      .from('questions')
      .select('value')
      .eq('id', questionId)
      .single()

    if (currentQuestion) {
      const { data: existingQuestion } = await supabase
        .from('questions')
        .select('id')
        .eq('category_id', moveData.targetCategoryId)
        .eq('value', currentQuestion.value)
        .single()

      if (existingQuestion) {
        throw new Error(`Question with value ${currentQuestion.value} already exists in target category`)
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: maxOrderData } = await supabase
      .from('questions')
      .select('order_index')
      .eq('category_id', moveData.targetCategoryId)
      .order('order_index', { ascending: false })
      .limit(1)

    const maxOrder = maxOrderData?.[0]?.order_index || 0
    const order = moveData.order ?? (maxOrder + 1)

    const { data, error } = await supabase
      .from('questions')
      .update({
        category_id: moveData.targetCategoryId,
        order,
        updated_at: new Date().toISOString(),
      })
      .eq('id', questionId)
      .select()
      .single()

    if (error) throw error
    return data as Question
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async reorderQuestions(categoryId: string, questionIds: string[]): Promise<Question[]> {
    const updates = questionIds.map((questionId, index) => ({
      id: questionId,
      order: index + 1,
      updated_at: new Date().toISOString(),
    }))

    const { error } = await supabase
      .from('questions')
      .upsert(updates)
      .select()

    if (error) throw error

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: updatedQuestions, error: fetchError } = await supabase
      .from('questions')
      .select('*')
      .eq('category_id', categoryId)
      .order('order_index', { ascending: true })

    if (fetchError) throw fetchError
    return updatedQuestions as Question[]
  }

  /**
   * –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
   */
  async duplicateQuestion(questionId: string, targetCategoryId?: string): Promise<Question> {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    const originalQuestion = await this.getQuestion(questionId)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const categoryId = targetCategoryId || originalQuestion.categoryId

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: maxOrderData } = await supabase
      .from('questions')
      .select('order_index')
      .eq('category_id', categoryId)
      .order('order_index', { ascending: false })
      .limit(1)

    const maxOrder = maxOrderData?.[0]?.order_index || 0

    // –°–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    let newValue = originalQuestion.value
    let attempts = 0
    const maxAttempts = 100

    while (attempts < maxAttempts) {
      const { data: existingQuestion } = await supabase
        .from('questions')
        .select('id')
        .eq('category_id', categoryId)
        .eq('value', newValue)
        .single()

      if (!existingQuestion) break

      newValue += 100
      attempts++
    }

    if (attempts >= maxAttempts) {
      throw new Error('Unable to find unique value for duplicated question')
    }

    const { data, error } = await supabase
      .from('questions')
      .insert({
        category_id: categoryId,
        value: newValue,
        text: `${originalQuestion.text} (Copy)`,
        answer: originalQuestion.answer,
        order: maxOrder + 1,
        is_locked: false,
        is_done: false,
      })
      .select()
      .single()

    if (error) throw error
    return data as Question
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–ª–∞–Ω–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
   */
  async checkQuestionLimits(gameId: string): Promise<{ current: number; max: number; canCreate: boolean }> {
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const { data: gameData, error: gameError } = await supabase
      .from('games')
      .select('org_id')
      .eq('id', gameId)
      .single()

    if (gameError) throw gameError

    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const { data: orgPlanData } = await supabase
      .from('org_plans')
      .select('plan_id')
      .eq('org_id', gameData.org_id)
      .single()

    const planId = orgPlanData?.plan_id || 'free'

    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–ª–∞–Ω–∞
    const { data: planData } = await supabase
      .from('plans')
      .select('caps')
      .eq('id', planId)
      .single()

    const caps = (planData?.caps as { maxQuestions?: number }) || {}
    const maxQuestions = caps.maxQuestions || 25 // Free plan limit

    // –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä—ã
    const { data: categoriesData } = await supabase
      .from('categories')
      .select('id')
      .eq('game_id', gameId)

    if (!categoriesData || categoriesData.length === 0) {
      return {
        current: 0,
        max: maxQuestions,
        canCreate: true,
      }
    }

    const categoryIds = categoriesData.map(cat => cat.id)

    const { count, error: countError } = await supabase
      .from('questions')
      .select('id', { count: 'exact' })
      .in('category_id', categoryIds)

    if (countError) throw countError

    const current = count || 0

    return {
      current,
      max: maxQuestions,
      canCreate: current < maxQuestions,
    }
  }
}

export const questionsApi = new QuestionsApi()
