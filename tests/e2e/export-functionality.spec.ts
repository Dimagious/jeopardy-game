import { test, expect, Page } from '@playwright/test'

test.describe('Export Functionality', () => {
  // Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
  const selectGameMode = async (page: Page, mode: 'jeopardy' | 'buzzer' = 'jeopardy') => {
    const buttonText = mode === 'jeopardy' ? '–í—ã–±—Ä–∞—Ç—å –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Jeopardy' : '–í—ã–±—Ä–∞—Ç—å Buzzer Mode'
    await expect(page.getByRole('button', { name: buttonText })).toBeVisible()
    await page.getByRole('button', { name: buttonText }).click()
    await page.waitForTimeout(500) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
  }

  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—É–ª—å—Ç–∞ –≤–µ–¥—É—â–µ–≥–æ
    await page.goto('/host/demo-game')
    await page.waitForLoadState('networkidle')
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã (–µ—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è)
    const restoreModal = page.locator('[data-testid="game-restore-modal"]')
    if (await restoreModal.isVisible()) {
      // –í—ã–±–∏—Ä–∞–µ–º "–ù–æ–≤–∞—è –∏–≥—Ä–∞" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
      await page.getByRole('button', { name: '–ù–æ–≤–∞—è –∏–≥—Ä–∞' }).click()
      await page.waitForTimeout(500) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –∏–≥—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Jeopardy)
    await selectGameMode(page, 'jeopardy')
  })

  test('should export results to CSV after answering questions', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    await expect(page.getByRole('button', { name: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV' })).toBeVisible()
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
    // –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    await page.getByText('$100').first().click()
    await page.getByRole('button', { name: '–ö–æ–º–∞–Ω–¥–∞ 1 0$' }).click()
    await page.getByRole('button', { name: '–í–µ—Ä–Ω–æ', exact: true }).click()
    
    // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—Å —É—á–µ—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    await page.waitForTimeout(100) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ forceSyncToScreen
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–∫–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    await expect(page.locator('.font-bold.text-jeopardy-gold').first()).toBeVisible()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const downloadPromise = page.waitForEvent('download')
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    await page.getByRole('button', { name: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV' }).click()
    
    // –ñ–¥–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const download = await downloadPromise
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
    expect(download.suggestedFilename()).toMatch(/^jeopardy_.*\.csv$/)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const path = await download.path()
    expect(path).toBeTruthy()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ–ª—å–∑—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    expect(download.suggestedFilename()).toMatch(/^jeopardy_.*\.csv$/)
  })

  test('should show export button even when no questions answered', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∏–¥–Ω–∞ –¥–∞–∂–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    await expect(page.getByRole('button', { name: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV' })).toBeVisible()
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    await page.getByRole('button', { name: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV' }).click()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (—Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
    // –≠—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–±—ã—Ç–∏—è download
    const downloadPromise = page.waitForEvent('download', { timeout: 1000 }).catch(() => null)
    const download = await downloadPromise
    
    expect(download).toBeNull()
  })

  test('should export correct data format', async ({ page }) => {
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
    await page.getByText('$100').first().click()
    await page.getByRole('button', { name: '–ö–æ–º–∞–Ω–¥–∞ 1 0$' }).click()
    await page.getByRole('button', { name: '–í–µ—Ä–Ω–æ', exact: true }).click()
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const downloadPromise = page.waitForEvent('download')
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    await page.getByRole('button', { name: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV' }).click()
    
    const download = await downloadPromise
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ–ª—å–∑—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    expect(download.suggestedFilename()).toMatch(/^jeopardy_.*\.csv$/)
  })
})
