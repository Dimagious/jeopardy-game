Author: Дима (PO/Founder)  
Version: v1 (2025‑09‑22)
---

## 0) Цели продукта

- **Игровое web‑приложение** под формат Jeopardy для офлайн/онлайн мероприятий.
    
- **Сценарий базовый (Jeopardy)**: только ведущий кликает; участники отвечают устно; большой экран для отображения.
    
- **Сценарий «Жужалки» (Buzzer)**: участники подключаются по PIN и жмут кнопку «Я первый».
    
- **Модель Freemium**: бесплатный план с лимитами; Pro — расширенные лимиты, брендинг, экспорт результатов, импорты.
    
- **Масштабируемость и мульти‑тенант**: организации, роли, RLS, Realtime, Stripe.
    

KPI (первые 3 месяца):

- 100 активных организаций.
    
- 1 000 сыгранных игр.
    
- Конверсия в Pro ≥ 5%.
    

---

## 1) Архитектура и технологии

**Фронтенд**: React + Vite, TypeScript, React Router.

- **Для экранов и пульта**: Tailwind (кастомная типографика, анимации, минимальный бандл).
    
- **Админка**: Tailwind + headless-подход (Radix/Headless UI). Допустим вариант подключения MUI на этапе v1.2 (EPIC‑C), если потребуется быстрый CRUD.
    
- **Состояние клиента**: Zustand (тонкий UI‑стор; источник истины — БД + Realtime). При росте сложности админки — точечное использование RTK Query для API‑кэша.
    

**Бэкенд**: Supabase (Postgres + Auth + Realtime + Storage + Edge Functions) без собственного сервера на v1.0–v1.1.

- Возможность миграции на свой стек (NestJS + Postgres + WebSockets + S3‑совместимое хранилище) без смены схемы данных.
    

**Монетизация**: Stripe Checkout (оплата) + Stripe Customer Portal (самообслуживание). Edge Function — обработчик вебхуков Stripe → синхронизация `org_plans`/`plan_id`.

**Наблюдаемость**: Sentry (FE), логирование Edge Functions; продуктовая аналитика PostHog/GA4 (события: `game_start`, `board_select`, `judge`, `buzz_first`).

**Деплой**: Vercel (FE), Supabase (BE). CI: GitHub Actions — lint → unit → build → (опц.) e2e против Vercel Preview.

**Мульти‑тенант и безопасность**:

- Все основные таблицы содержат `org_id` и защищены RLS.
    
- Роли: `Owner`, `Admin`, `Host`, `Viewer`, `Player` (см. §7 Роли и доступы).
    

**Реалтайм**: Supabase Realtime каналы формата `game:{gameId}` (pub/sub). Host публикует события, Screen/Player подписаны.

---

## 2) Схема данных (Postgres)

```sql
-- Организации и участники
orgs(id uuid pk, name text, created_by uuid, created_at timestamptz)
memberships(user_id uuid, org_id uuid, role text check(role in ('Owner','Admin','Host','Viewer')),
            created_at timestamptz, pk(user_id, org_id))

-- Планы и лимиты
plans(id text pk, name text, caps jsonb)
org_plans(org_id uuid, plan_id text, active boolean, since timestamptz)

-- Игры
games(id uuid pk, org_id uuid, title text, status text, created_by uuid, created_at timestamptz)
teams(id uuid pk, game_id uuid, name text, ord int)
categories(id uuid pk, game_id uuid, name text, ord int)
questions(id uuid pk, category_id uuid, value int, text text, answer text, ord int,
          is_locked boolean default false, is_done boolean default false)

-- События очков (источник истины)
score_events(id uuid pk, game_id uuid, team_id uuid, question_id uuid, delta int,
             created_at timestamptz default now())

-- Текущий снэпшот состояния (для быстрых реконнектов)
game_state(id uuid pk, game_id uuid unique, state_json jsonb, updated_at timestamptz)

-- Сессии игроков (для Buzzer/Answers)
sessions(id uuid pk, org_id uuid, game_id uuid, pin text, is_active boolean, created_at timestamptz)
players(id uuid pk, session_id uuid, team_id uuid null, user_label text, joined_at timestamptz)

-- Входящие события от игроков
buzz_events(id uuid pk, session_id uuid, player_id uuid, ts timestamptz)
answer_submissions(id uuid pk, session_id uuid, player_id uuid, question_id uuid, payload jsonb,
                   created_at timestamptz)
```

**RLS (идея):** `org_id = auth.jwt().org_id`. Для `games` — join через `org_id`. Для `memberships` — только свои строки. Для публичного `/screen` — только чтение по `game_id` с токеном доступа «viewer».

**Caps (пример для Freemium):**

```json
{
  "free": {"maxGames": 3, "maxTeams": 4, "maxGridRows": 5, "maxGridCols": 5, "branding": false},
  "pro":  {"maxGames": 20, "maxTeams": 8, "maxGridRows": 6, "maxGridCols": 6, "branding": true}
}
```

---

## 3) Маршруты приложения

- `/login` — аутентификация (Magic Link/OAuth).
    
- `/org/:orgId/admin` — админка организации (CRUD игр, пакетов, лимиты, биллинг).
    
- `/org/:orgId/library` — библиотека пакетов вопросов (импорт/экспорт CSV/JSON, предпросмотр).
    
- `/host/:gameId` — пульт ведущего (только Host/Admin).
    
- `/screen/:gameId` — большой экран (публичный токен/линк, read‑only).
    
- `/p/:pin` → редирект на `/player/:sessionId` (Buzzer/Answers этап 2).
    
- `/player/:sessionId` — страница участника.
    

**API (через Supabase/Edge):**

- `POST /edge/stripe/webhook` — обработка подписки.
    
- `POST /edge/admin/create-session` — выдача PIN, создание сессии.
    
- Realtime каналы: `game:{gameId}` — сообщения `BOARD_SELECT`, `ANSWER_TOGGLE`, `JUDGE`, `LOCK`, `BUZZ`, `ANSWER_SUBMIT`.
    

---

## 3.1) ADR — Architecture Decision Records (кратко)

**ADR‑001: Tailwind vs MUI** — Для экранов/пульта используем Tailwind ради кастомной типографики и анимаций. MUI допустим в админке на этапе v1.2 (быстрый CRUD).  
**ADR‑002: Zustand vs Redux Toolkit** — Zustand для тонкого UI‑состояния; источник истины в БД/Realtime. При необходимости — RTK Query точечно для API.  
**ADR‑003: Supabase Managed** — Запуск v1.0–v1.1 на Supabase ради Time‑to‑Market. Схема БД универсальна; миграция на свой сервер возможна без изменения доменной модели.  
**ADR‑004: Реалтайм через Supabase Realtime** — Один канал на игру `game:{gameId}`; типизированные события. Для «кто первый» используем серверные метки времени (Edge) на этапе buzzer.  
**ADR‑005: Монетизация Stripe** — Checkout + Customer Portal; вебхуки через Edge Functions. Логика планов — в `org_plans`/RLS‑caps.  
**ADR‑006: Аутентификация обязательна** — Для мульти‑тенанта, приватного `/host`, Freemium‑лимитов и истории игр.  
**ADR‑007: Тестовая стратегия** — Vitest+RTL (unit/component), Playwright/Cypress (e2e на Vercel Preview), моки Realtime или тестовая БД.

## 4) Эпики и релизы

### EPIC‑A: Jeopardy (базовый) — v1.0

Цель: полный офлайн/онлайн сценарий без участницких устройств.

### EPIC‑B: Buzzer + PIN — v1.1

Цель: гонка «кто первый нажал». Привязка к игре через PIN.

### EPIC‑C: Админка Pro + Freemium/Stripe — v1.2

Цель: многоразовое использование, планы, брендирование, импорт/экспорт, отчёты.

### EPIC‑D: Надёжность и наблюдаемость — v1.3

Цель: Sentry, персистентность состояния, бэкапы, производительность.

---

## 5) Бэклог по историям (US‑XXX)

**Добавлено к Acceptance по архитектуре:**

- В US‑001 включить установку Sentry и базовой телеметрии (флаг env).
    
- В US‑002 прописать событие `BOARD_SELECT` в Realtime API (локально — мок/шина), интерфейс событий вынести в `@/shared/events`.
    
- В US‑101 добавить Edge Function `create-session` с генерацией PIN и серверным временем.
    

### EPIC‑A — Jeopardy (базовый)

**US‑001 — Каркас проекта**

- **Как** разработчик, **я хочу** базовый каркас (Vite+React+TS+Tailwind+Router), **чтобы** быстро собрать MVP.
    
- Acceptance:
    
    - `npm run dev/build` работает; Prettier/ESLint настроены; GitHub Actions: lint+build.
        
    - Базовые страницы: `/host/:gameId`, `/screen/:gameId`, `/login`.
        
- Tasks:
    
    - FE каркас; роутинг; дизайн‑система (Tailwind config); UI‑кит кнопок/карт/модалок.
        
    - Branch: `US-001-scaffold`.
        

**US‑002 — Экран «Поле» и «Пульт» локально**

- **Как** ведущий, **я хочу** кликать по ячейкам на пульте и видеть вопрос на экране, **чтобы** провести игру.
    
- Acceptance:
    
    - На `/host/:gameId` вид: сетка категорий×стоимостей, мигание клетки, открытие вопроса, «Показать ответ», «Верно/Неверно», «В меню».
        
    - На `/screen/:gameId` отображается либо поле, либо текущий вопрос/ответ; табло команд.
        
    - Горячие клавиши: `A` — ответ, `C` — верно, `X` — неверно, `Esc` — назад.
        
- Tasks:
    
    - Компоненты: `Board`, `HostPanel`, `Screen`, `Scoreboard`.
        
    - Локальная модель (in‑memory) и сериализация в `localStorage`.
        
    - Branch: `US-002-board-host-screen`.
        

**US‑003 — Команды и подсчёт очков (event‑sourcing)**

- **Как** ведущий, **я хочу** выбирать команду и засчитывать ответы, **чтобы** табло считало баллы корректно.
    
- Acceptance:
    
    - Источник истины — `score_events` (локально в MVP), табло = сумма `delta`.
        
    - Вопрос после зачёта помечается `done` и недоступен повторно.
        
    - Экспорт результатов в CSV (время, questionId, teamId, delta).
        
- Tasks:
    
    - Модель событий; кнопки «Верно/Неверно»; экспорт.
        
    - Branch: `US-003-scoring`.
        

**US‑004 — Импорт/экспорт пакетов вопросов (CSV/JSON)**

- **Как** админ, **я хочу** импортировать CSV/JSON пакет, **чтобы** быстро готовить игры.
    
- Acceptance:
    
    - CSV формат: `Category,Value,Question,Answer`.
        
    - Парсер с валидацией; предпросмотр; сохранение в библиотеку (локально).
        
- Tasks:
    
    - CSV парсер; UI импорта; шаблон‑пример.
        
    - Branch: `US-004-pack-import`.
        

**US‑005 — Визуальные темы и анимации**

- **Как** ведущий, **я хочу** красивое мигание/цвета и читабельный экран, **чтобы** залу было приятно.
    
- Acceptance:
    
    - Анимация выбора; контрастный большой шрифт; адаптация под ТВ 1080p/4K.
        
- Branch: `US-005-theme`.
    

**US‑006 — Снапшот состояния и восстановление**

- **Как** ведущий, **я хочу** восстановить игру после перезагрузки, **чтобы** не терять прогресс.
    
- Acceptance:
    
    - При загрузке `/host` можно «Продолжить игру»; `/screen` синхронизируется.
        
- Branch: `US-006-snapshot`.
    

### EPIC‑B — Buzzer + PIN

**US‑101 — Сессии и PIN**

- **Как** хост, **я хочу** генерировать PIN, **чтобы** участники подключились.
    
- Acceptance:
    
    - В админке/пульте кнопка «Начать сессию» → PIN на экране.
        
    - `/p/:pin` → `/player/:sessionId` с минимальным профилем (ник).
        
- Branch: `US-101-pin-session`.
    

**US‑102 — Жужалка (кто первый нажал)**

- **Как** участник, **я хочу** одну большую кнопку, **чтобы** заявить право отвечать.
    
- Acceptance:
    
    - Первый `buzz` блокирует остальных на N секунд.
        
    - На пульте всплывает «Первая: Команда/ник» + таймер.
        
- Branch: `US-102-buzzer`.
    

**US‑103 — Привязка игроков к командам**

- **Как** хост, **я хочу** раздать игроков по командам, **чтобы** считать баллы корректно.
    
- Acceptance:
    
    - На пульте список подключившихся; drag’n’drop в команды; автосохранение.
        
- Branch: `US-103-team-assign`.
    

**US‑104 — Антиспам и reconnect**

- **Как** хост, **я хочу** rate‑limit и авто‑reconnect, **чтобы** система не ломалась.
    
- Acceptance:
    
    - Debounce на клиенте, throttling на Edge; восстановление подключения без потери сессии.
        
- Branch: `US-104-buzzer-hardening`.
    

### EPIC‑C — Админка Pro + Freemium/Stripe

**US‑201 — Auth и роли (Org/Member/RLS)**

- **Как** владелец, **я хочу** управлять участниками и ролями, **чтобы** разделять доступы.
    
- Acceptance:
    
    - RLS активирован; Owner/Admin назначают Host/Viewer.
        
- Branch: `US-201-auth-roles`.
    

**US‑202 — Библиотека пакетов и CRUD игр (мульти‑тенант)**

- **Как** админ, **я хочу** хранить пакеты вопросов и игры в организации, **чтобы** переиспользовать.
    
- Acceptance:
    
    - `/org/:orgId/admin`: список игр, пакетов; дублирование игры; предпросмотр пакета.
        
- Branch: `US-202-admin-crud`.
    

**US‑203 — Лимиты Freemium**

- **Как** владелец, **я хочу** бесплатный план с лимитами, **чтобы** начать без оплаты.
    
- Acceptance:
    
    - Caps применяются при создании/редактировании (валидация UI + DB‑constraint).
        
- Branch: `US-203-freemium-caps`.
    

**US‑204 — Stripe интеграция (Pro)**

- **Как** владелец, **я хочу** оформить подписку, **чтобы** снять лимиты и включить брендинг.
    
- Acceptance:
    
    - Checkout/Portal; вебхуки включают `plan_id=pro`.
        
- Branch: `US-204-stripe`.
    

**US‑205 — Брендинг Pro**

- **Как** Pro‑организация, **я хочу** загрузить логотип и цвета, **чтобы** брендировать экран.
    
- Acceptance:
    
    - Лого/цвета применяются на `/screen`.
        
- Branch: `US-205-branding`.
    

**US‑206 — Экспорт результатов и отчёты**

- **Как** админ, **я хочу** экспорт PDF/CSV результатов с таймлайном событий.
    
- Acceptance:
    
    - Экспорт CSV (события); PDF отчёт (лучшая команда, сумма, скорость buzz).
        
- Branch: `US-206-reports`.
    

### EPIC‑D — Надёжность и наблюдаемость

**US‑301 — Sentry и телеметрия**

- Errors FE/Edge; продуктовая аналитика (GA4/PostHog события: game_start, board_select, judge, buzz_first).
    
- Branch: `US-301-observability`.
    

**US‑302 — Персистентность и бэкапы**

- Автоснапшоты `game_state`; ежедневные бэкапы БД.
    
- Branch: `US-302-persistence`.
    

**US‑303 — Перфоманс и SLO**

- Цели: TTI < 3s, Realtime < 250ms p95, ошибка событий < 0.1%.
    
- Branch: `US-303-performance`.
    

---

## 6) Acceptance подробно (ключевые фичи)

**Board/Question flow**

- Клик по ячейке → 0.9s blink → экран вопроса (событие `BOARD_SELECT`).
    
- «Показать ответ» публикует `ANSWER_TOGGLE(show=true)`; на `/screen` ответ появляется только при `show=true`.
    
- «Верно/Неверно» создаёт `score_event(delta=±value)` и публикует `JUDGE`; вопрос `is_done=true` + `LOCK`.
    

**Scoreboard**

- Табло = сумма `score_events`. При реконнекте — пересчёт из БД; снапшот в `game_state` для быстрой инициализации.
    

**Buzzer**

- Первый `BUZZ` (отмеченный серверным timestamp) выигрывает окно 3s; остальные блокируются; пульту показывается победитель + таймер.
    

**Freemium Caps**

- Free: игры≤3, команды≤4, сетка≤5×5, без брендирования.
    
- Pro: игры≤20, команды≤8, сетка≤6×6, брендирование экрана, экспорт отчётов, библиотека.
    

---

## 7) Инструкции

### Зачем регистрация (кратко)

- Мульти‑тенант (orgs), Freemium/Pro (привязка оплаты), приватный `/host`, история и экспорт, антиабьюз.
    

### Роли и доступы

- **Owner** — владелец орг: биллинг/план, удаление орг, полный доступ.
    
- **Admin** — управление пользователями, играми, пакетами; без биллинга (по умолчанию).
    
- **Host** — проведение игр, `/host`, создание сессий/PIN; без прав на биллинг/глобальные настройки.
    
- **Viewer** — просмотр `/screen`, отчёты read‑only.
    
- **Player** — участие через `/player/:sessionId`.
    

### Ведущий (Jeopardy)

1. Войдите (Magic Link) → админка → выберите игру → «Открыть пульт».
    
2. Подключите `/screen/:gameId` к ТВ/проектору.
    
3. Клик по ячейке (мигание → вопрос). **A** — показать/скрыть ответ, **C/X** — зачёт, **Esc** — назад.
    
4. Экспорт CSV по окончании.
    

### Ведущий (Buzzer)

1. «Начать сессию» → PIN/QR на экране.
    
2. Участники: `p/:PIN` → ник → (опц.) распределите по командам.
    
3. Первый `BUZZ` (по серверному времени) получает право ответа → зачтите.
    

### Участники (Buzzer)

1. Откройте ссылку/QR `p/:PIN` → введите ник.
    
2. На вопрос — жмите «Я первый». Ждите решения ведущего и сигнала.
    

---

### Ведущий (Jeopardy)

1. Войдите (Magic Link) → откройте админку → выберите игру → «Открыть пульт».
    
2. Подключите `/screen/:gameId` к ТВ/проектору (HDMI/AirPlay). Проверьте шрифт и видимость.
    
3. Участники выбирают категорию/стоимость — вы кликаете клетку (мигание → вопрос).
    
4. Читайте вопрос. При необходимости нажмите **Показать ответ**.
    
5. Выберите команду и нажмите **Верно/Неверно** (горячие клавиши A/C/X/Esc). Табло обновится.
    
6. По завершении — экспортируйте CSV отчёт, при желании сохраните игру как шаблон.
    

### Ведущий (Buzzer)

1. Нажмите «Начать сессию» → на `/screen` появится PIN и QR.
    
2. Участники зайдут на `p/:PIN` → введут ник → (опционально) распределите по командам.
    
3. На открытом вопросе — участники жмут кнопку. Первый по серверному времени получает право отвечать.
    
4. Примите ответ устно → зачтите верно/неверно.
    

### Участники (Buzzer)

1. Перейдите по ссылке/QR `p/:PIN`. Введите ник.
    
2. Когда ведущий открыл вопрос — жмите кнопку «Я первый». Если вы первые, ждите слово.
    

---

## 8) UI/UX принципы

- `/screen`: тёмная тема, крупная типографика 48–80px, safe‑area 5%, анимации ≤900ms.
    
- `/host`: компактные контролы, хоткеи (A/C/X/Esc), явная подсветка активной команды.
    
- Админка: таблицы/формы без визуального шума; быстрая фильтрация пакетов; предпросмотр.
    

---

## 9) Нефункциональные требования

- Доступность: контраст WCAG AA на `/screen`.
    
- Производительность: TTI < 3s, Realtime p95 < 250ms, поддержка 1 000 игроков/сессию (этап 2).
    
- Надёжность: авто‑снапшоты `game_state` каждые 10s; ежедневные бэкапы БД; восстановление после разрыва.
    
- Безопасность: RLS, JWT срок 1ч, refresh‑токены; Edge rate‑limit для PIN/BUZZ.
    

---

## 10) План релизов и ветки

- v1.0 — EPIC‑A: `release/v1.0`; ветки `US-001..006` → PR в `develop`, затем в `main`.
    
- v1.1 — EPIC‑B: `release/v1.1`; ветки `US-101..104`.
    
- v1.2 — EPIC‑C: `release/v1.2`; ветки `US-201..206`.
    
- v1.3 — EPIC‑D: `release/v1.3`; ветки `US-301..303`.
    

PR правила: заголовок = номер US; DoD = линтер, юнит‑тесты, e2e‑смоук, чеклист acceptance.

---

## 11) Импорт/экспорт: форматы

**CSV** `Category,Value,Question,Answer`.  
**JSON**

```json
{ "title":"Мой пакет", "categories":[ {"name":"Математика", "questions":[ {"value":100, "text":"2+2?", "answer":"4"} ]} ] }
```

---

## 12) События Realtime (канал game:{gameId})

```json
{ "type":"BOARD_SELECT", "questionId":"uuid" }
{ "type":"ANSWER_TOGGLE", "show":true }
{ "type":"JUDGE", "teamId":"uuid", "questionId":"uuid", "correct":true, "delta":100 }
{ "type":"LOCK", "questionId":"uuid" }
{ "type":"BUZZ", "playerId":"uuid", "ts": 1737600000000 }
{ "type":"ANSWER_SUBMIT", "playerId":"uuid", "questionId":"uuid", "payload":{"text":"…"} }
```

**Пояснение:** это pub/sub‑сообщения в Realtime‑канале. Host публикует, Screen/Player слушают. Для честного «кто первый» используем серверную фиксацию времени (Edge Function) и один источник истины.

---

## 13) Риски и смягчение

- Перегрузка Realtime при большом онлайне → батчинг сообщений, локальные таймеры.
    
- Читерство в Buzzer → серверная отметка времени на Edge, синхронизация времени.
    
- Потеря соединения → снапшоты `game_state` и `resume`.
    

---

## 14) Roadmap «что дальше»

- Этап 3: «Ответы с устройств» (текст/варианты, авто‑оценка regex/fuzzy, модерация).
    
- Этап 4: Трансляция/OBS scene, режим «турнир» (несколько раундов), финальная игра.
    
- Этап 5: Публичная галерея пакетов, рейтинги, community.